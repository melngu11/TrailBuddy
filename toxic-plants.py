# -*- coding: utf-8 -*-
"""Toxic-Plants.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hNVCOdDSbCegd7IHCZZdnVtgLtjIm8Fr
"""

import torch
import torch.nn as nn
import torch.optim as optim
import torchvision
import torchvision.transforms as transforms
from torch.utils.data import DataLoader, Dataset
from torch.utils.data import random_split
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix, classification_report
from sklearn.model_selection import train_test_split
import cv2
from PIL import Image

from google.colab import files
uploaded = files.upload()
!pip install kaggle
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

"""Download toixc-plant-classification dataset from Kaggle and unzip the contents

"""

!kaggle datasets download -d hanselliott/toxic-plant-classification
!unzip \*.zip && rm *.zip

import numpy as mp
import pandas as pd
import os

x = torch.rand(5,3)
print(x)

"""Import pretrained MobileNet from pyTorch

"""

model = torch.hub.load('pytorch/vision:v0.10.0', 'mobilenet_v2', pretrained=True)
model.eval()

preprocess = transforms.Compose([
    transforms.Resize(256),
    transforms.CenterCrop(224),
    transforms.ToTensor(),
    # transforms.Normalize(0.0,)
    # transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225])
])

def plot_label_count (df, column):
    vcounts=df[column].value_counts()
    labels=vcounts.keys().tolist()
    values=vcounts.tolist()
    plt.figure(figsize=(15,4))
    form = {'family': 'serif', 'color': 'blue', 'size': 25}
    plt.bar(labels, values)
    plt.title('Images per label in training set', fontsize= 24, color='blue')
    plt.xticks(rotation=90, fontsize=18)
    plt.yticks(fontsize=18)
    plt.xlabel("Labels", fontdict=form)
    plt.ylabel('Number of Images', fontdict=form)
    plt.show()

# Custom dataset class to handle images
class ImageDataset(Dataset):
    def __init__(self, dataframe, transform=None):
        self.df = dataframe
        self.transform = transform

    def __len__(self):
        return len(self.df)

    def __getitem__(self, index):
        img_path = self.df.iloc[index, 1]  # Assuming 'filepaths' is at index 1
        image = Image.open(img_path)
        label = self.df.iloc[index, 0]  # Assuming 'labels' is at index 0

        if self.transform:
            image = self.transform(image)

        return image, label

def change_path(df):
    base_path = '/content/tpc-imgs/'  # Define the correct full base path
    # Check if the base path is already in the filepath, if not, replace and prepend the base path
    df['filepaths'] = df['filepaths'].apply(
        lambda x: x.replace(base_path, '').replace('../input/toxic-plant-classification/tpc-imgs/', '')
    )
    df['filepaths'] = base_path + df['filepaths'].str.lstrip('/')
    return df

def make_dataframes(csvpath):
    df=pd.read_csv(csvpath)
    df=df.drop(['class_id','scientific_name', 'herbarium22_category_id', 'species_label'], axis=1)

    # Rename remaining columns for readibility
    df.columns=['labels', 'filepaths','toxicity']

    # Split dataset into training and validation/test sets (50% of 80% training dataset)
    torch.manual_seed(0) # Set seed for reproducability
    train_df, dummy_df = train_test_split(df, train_size=0.8, shuffle=True, random_state=123, stratify=df['labels'])
    valid_df, test_df = train_test_split(dummy_df, train_size=0.5, shuffle=True, random_state=123, stratify=dummy_df['labels'])

    train_df = change_path(train_df)
    test_df = change_path(test_df)
    valid_df = change_path(valid_df)

    print(train_df['filepaths'].head(5))

    train_dataset = ImageDataset(train_df, transform=preprocess)
    valid_dataset = ImageDataset(valid_df, transform=preprocess)
    test_dataset = ImageDataset(test_df, transform=preprocess)

    print('train_df length: ', len(train_df), '  test_df length: ', len(test_df), '  valid_df length: ', len(valid_df))

    # Sort the training dataset by unique labels and display the count
    classes=sorted(train_df['labels'].unique())
    class_count=len(classes)

    # plot_label_count (train_dataset, 'labels')
    sample_df=train_df.sample(n=100, replace=False)
    return train_dataset, test_dataset, valid_dataset, classes, class_count

csvpath=r'/content/toxic-plant-classification/full_metadata.csv'
train_dataset, test_dataset, valid_dataset, classes, class_count = make_dataframes(csvpath)

print('training dataset: ', len(train_dataset))
print('validation dataset: ', len(valid_dataset))
print('testing dataset: ', len(test_dataset))

#unset seed after data split and continue with training:
torch.seed()

figure = plt.figure(figsize=(8, 8))
cols, rows = 3, 3

# Displaying figures from the dataset randomly
for i in range(1, cols * rows + 1):
    sample_idx = torch.randint(len(train_dataset), size=(1,)).item()
    img, label = train_dataset[sample_idx]  # Use indexing to access the dataset
    img = img.numpy().transpose((1, 2, 0))

    ax = figure.add_subplot(rows, cols, i)
    ax.set_title(label)  # Set the title to the label
    ax.axis("off")  # Turn off the axis
    ax.imshow(img)  # Display the image

plt.show()  # Show the plot
